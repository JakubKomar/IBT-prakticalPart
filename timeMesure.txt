        start = time.time()

        end = time.time()
        self.test.append(end - start)
        if( len(self.test)>100):
            evVal=0
            for a in self.test:
                evVal+=a
            evVal=evVal/len(self.test)
            print( evVal)
            self.test=[]






Item {
    id:tankLeft
    property double maxValue:8000
    property double minValue:0
    property double value: 500
    property double alfa:85
    property double beta:80
    width: 640
    height: 484
    Shape {
        id:shape
        anchors.fill: parent
        property double fillLevelCoord: shape.height/(maxValue-minValue)*value
        ShapePath {
            strokeWidth: 1
            strokeColor: "white"
            fillColor: "transparent"
            startX: 0; startY: shape.height
            PathLine { x: shape.width; y: shape.height-shape.width/Math.tan(shape.toRadians(alfa)) }
            PathLine { x: shape.width; y: 0 }
            PathLine { x: 0; y: shape.width/Math.tan(shape.toRadians(beta)) }
            PathLine { x: 0; y: shape.height }
        }

        ShapePath {
            strokeColor: "red"
            strokeWidth: 6
            startX: 0; startY: shape.height
            PathLine {
                x: fillLevelCoord * Math.tan(shape.toRadians(alfa));
                y: shape.height - fillLevelCoord
            }

        }
        function toDegrees (angle) {
          return angle * (180 / Math.PI);
        }
        function toRadians (angle) {
          return angle * (Math.PI / 180);
        }

    }
}

